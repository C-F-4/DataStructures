/**
 * Utils Functions features various Algorithm Approaches (Function Definitions)
 */

#include <iostream>
#include <climits>
#include <vector>
#include "utils.hpp"

typedef unsigned int uint;

namespace utils {
    /*template <typename T>
    std::pair<bool, int> linearSearch(std::vector<T> input, T key) {
        for(uint i = 0; i < input.size(); i++) {
            if(input.at(i) == key) {
                return std::pair<bool, int>(true, i);
            }
        }
        return std::pair<bool, int>(false, INT_MIN);
    }

    template <typename T>
    std::pair<bool, int> binarySearch(std::vector<T> input, T key, int left, int right) {
        int mid = (left + right) / 2;
        if(input.at(mid) == key) {
            return std::pair<bool, int>(true, mid);
        }
        else if(left > right) {
            return std::pair<bool, int>(false, INT_MIN);
        }
        else if(input.at(mid) < key) {
            return binarySearch(input, key, mid+1, right);
        }
        else {
            return binarySearch(input, key, left, mid-1);
        }
    }

    template <typename T>
    std::pair<bool, int> binarySearchWrap(std::vector<T> input, T key) {
        return binarySearch(input, key, 0, input.size()-1);
    }*/

    template <typename T>
    std::vector<T> bubbleSort(std::vector<T> v) {
        for(uint i = 0; i < v.size()-1; i++) {
            for(uint j = 0; j < v.size()-i-1; j++) {
                if(v.at(j) > v.at(j+1)) {
                    // swap
                    int tmp = v.at(j);
                    v.at(j) = v.at(j+1);
                    v.at(j+1) = tmp;
                }
            }
        }
        return v;
    }

    template <typename T>
    std::vector<T> insertionSort(std::vector<T> v) {
        return v;
    }

    template <typename T>
    std::vector<T> mergeSort(std::vector<T> v) {
        return v;
    }

    template <typename T>
    std::vector<T> quickSort(std::vector<T> v) {
        return v;
    }

    std::vector<int> sumOfSubsets(std::vector<int> v, std::vector<bool> m, int sum) {
        return v;
    }

    std::vector<int> sumOfSubWrap(std::vector<int> v, int sum) {
        uint i = 0;
        for(i = 0; i < v.size(); i++) {
            if(v.at(i) > sum) {
                break;
            }
        }
        v.resize(i+1);

        std::vector<bool> marked(v.size(), false);
        return sumOfSubsets(v, marked, 0);
    }
}
